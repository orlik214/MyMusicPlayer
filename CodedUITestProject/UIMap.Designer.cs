// ------------------------------------------------------------------------------
//  <auto-generated>
//      Ten kod został wygenerowany przez konstruktora kodowanego testu interfejsu użytkownika.
//      Wersja: 16.0.0.0
//
//      Zmiany w tym pliku mogą spowodować nieprawidłowe zachowanie i zostaną utracone, jeśli
//      kod zostanie ponownie wygenerowany.
//  </auto-generated>
// ------------------------------------------------------------------------------

namespace CodedUITestProject
{
    using System;
    using System.CodeDom.Compiler;
    using System.Collections.Generic;
    using System.Drawing;
    using System.Text.RegularExpressions;
    using System.Windows.Input;
    using Microsoft.VisualStudio.TestTools.UITest.Extension;
    using Microsoft.VisualStudio.TestTools.UITesting;
    using Microsoft.VisualStudio.TestTools.UITesting.WinControls;
    using Microsoft.VisualStudio.TestTools.UnitTesting;
    using Keyboard = Microsoft.VisualStudio.TestTools.UITesting.Keyboard;
    using Mouse = Microsoft.VisualStudio.TestTools.UITesting.Mouse;
    using MouseButtons = System.Windows.Forms.MouseButtons;
    
    
    [GeneratedCode("Kodowany konstruktor testu interfejsu użytkownika", "16.0.29514.35")]
    public partial class UIMap
    {
        
        /// <summary>
        /// btnNextRecordedMethod
        /// </summary>
        public void btnNextRecordedMethod()
        {
            #region Variable Declarations
            WinClient uIBtnNextClient = this.UIMyMusicPlayerWindow.UIBtnNextWindow.UIBtnNextClient;
            #endregion

            // Kliknij 'btnNext' klient
            Mouse.Click(uIBtnNextClient, new Point(9, 6));
        }
        
        /// <summary>
        /// AssertbtnNext - Użyj "AssertbtnNextExpectedValues" do przekazania parametrów do tej metody.
        /// </summary>
        public void AssertbtnNext()
        {
            #region Variable Declarations
            WinListItem uIItem2ACEOFBASEALLTHAListItem = this.UIMyMusicPlayerWindow.UISongsListList.UIItem2ACEOFBASEALLTHAListItem;
            #endregion

            // Sprawdź czy "Selected" właściwość '2. ACE OF BASE - ALL THAT SHE WANTS.mp3' element listy równa się "True"
            Assert.AreEqual(this.AssertbtnNextExpectedValues.UIItem2ACEOFBASEALLTHAListItemSelected, uIItem2ACEOFBASEALLTHAListItem.Selected, "Nie zostal odtworzony nastepny element na liscie");
        }
        
        /// <summary>
        /// btnPreviousRecordedMethod
        /// </summary>
        public void btnPreviousRecordedMethod()
        {
            #region Variable Declarations
            WinClient uIBtnPreviousClient = this.UIMyMusicPlayerWindow.UIBtnPreviousWindow.UIBtnPreviousClient;
            #endregion

            // Kliknij 'btnPrevious' klient
            Mouse.Click(uIBtnPreviousClient, new Point(12, 10));
        }
        
        /// <summary>
        /// AssertbtnPrevious - Użyj "AssertbtnPreviousExpectedValues" do przekazania parametrów do tej metody.
        /// </summary>
        public void AssertbtnPrevious()
        {
            #region Variable Declarations
            WinListItem uIItem1AceofBaseAllForListItem = this.UIMyMusicPlayerWindow.UISongsListList.UIItem1AceofBaseAllForListItem;
            #endregion

            // Sprawdź czy "Selected" właściwość '1. Ace of Base - All For You.mp3' element listy równa się "True"
            Assert.AreEqual(this.AssertbtnPreviousExpectedValues.UIItem1AceofBaseAllForListItemSelected, uIItem1AceofBaseAllForListItem.Selected, "Nie zostal odtworzony poprzedni element na liscie");
        }
        
        #region Properties
        public virtual AssertbtnNextExpectedValues AssertbtnNextExpectedValues
        {
            get
            {
                if ((this.mAssertbtnNextExpectedValues == null))
                {
                    this.mAssertbtnNextExpectedValues = new AssertbtnNextExpectedValues();
                }
                return this.mAssertbtnNextExpectedValues;
            }
        }
        
        public virtual AssertbtnPreviousExpectedValues AssertbtnPreviousExpectedValues
        {
            get
            {
                if ((this.mAssertbtnPreviousExpectedValues == null))
                {
                    this.mAssertbtnPreviousExpectedValues = new AssertbtnPreviousExpectedValues();
                }
                return this.mAssertbtnPreviousExpectedValues;
            }
        }
        
        public UIMyMusicPlayerWindow UIMyMusicPlayerWindow
        {
            get
            {
                if ((this.mUIMyMusicPlayerWindow == null))
                {
                    this.mUIMyMusicPlayerWindow = new UIMyMusicPlayerWindow();
                }
                return this.mUIMyMusicPlayerWindow;
            }
        }
        #endregion
        
        #region Fields
        private AssertbtnNextExpectedValues mAssertbtnNextExpectedValues;
        
        private AssertbtnPreviousExpectedValues mAssertbtnPreviousExpectedValues;
        
        private UIMyMusicPlayerWindow mUIMyMusicPlayerWindow;
        #endregion
    }
    
    /// <summary>
    /// Parametry do przekazania do "AssertbtnNext"
    /// </summary>
    [GeneratedCode("Kodowany konstruktor testu interfejsu użytkownika", "16.0.29514.35")]
    public class AssertbtnNextExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Sprawdź czy "Selected" właściwość '2. ACE OF BASE - ALL THAT SHE WANTS.mp3' element listy równa się "True"
        /// </summary>
        public bool UIItem2ACEOFBASEALLTHAListItemSelected = true;
        #endregion
    }
    
    /// <summary>
    /// Parametry do przekazania do "AssertbtnPrevious"
    /// </summary>
    [GeneratedCode("Kodowany konstruktor testu interfejsu użytkownika", "16.0.29514.35")]
    public class AssertbtnPreviousExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Sprawdź czy "Selected" właściwość '1. Ace of Base - All For You.mp3' element listy równa się "True"
        /// </summary>
        public bool UIItem1AceofBaseAllForListItemSelected = true;
        #endregion
    }
    
    [GeneratedCode("Kodowany konstruktor testu interfejsu użytkownika", "16.0.29514.35")]
    public class UIMyMusicPlayerWindow : WinWindow
    {
        
        public UIMyMusicPlayerWindow()
        {
            #region Kryteria wyszukiwania
            this.SearchProperties[WinWindow.PropertyNames.Name] = "MyMusicPlayer";
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("MyMusicPlayer");
            #endregion
        }
        
        #region Properties
        public UIBtnNextWindow UIBtnNextWindow
        {
            get
            {
                if ((this.mUIBtnNextWindow == null))
                {
                    this.mUIBtnNextWindow = new UIBtnNextWindow(this);
                }
                return this.mUIBtnNextWindow;
            }
        }
        
        public UISongsListList UISongsListList
        {
            get
            {
                if ((this.mUISongsListList == null))
                {
                    this.mUISongsListList = new UISongsListList(this);
                }
                return this.mUISongsListList;
            }
        }
        
        public UIBtnPreviousWindow UIBtnPreviousWindow
        {
            get
            {
                if ((this.mUIBtnPreviousWindow == null))
                {
                    this.mUIBtnPreviousWindow = new UIBtnPreviousWindow(this);
                }
                return this.mUIBtnPreviousWindow;
            }
        }
        #endregion
        
        #region Fields
        private UIBtnNextWindow mUIBtnNextWindow;
        
        private UISongsListList mUISongsListList;
        
        private UIBtnPreviousWindow mUIBtnPreviousWindow;
        #endregion
    }
    
    [GeneratedCode("Kodowany konstruktor testu interfejsu użytkownika", "16.0.29514.35")]
    public class UIBtnNextWindow : WinWindow
    {
        
        public UIBtnNextWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Kryteria wyszukiwania
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "btnNext";
            this.WindowTitles.Add("MyMusicPlayer");
            #endregion
        }
        
        #region Properties
        public WinClient UIBtnNextClient
        {
            get
            {
                if ((this.mUIBtnNextClient == null))
                {
                    this.mUIBtnNextClient = new WinClient(this);
                    #region Kryteria wyszukiwania
                    this.mUIBtnNextClient.WindowTitles.Add("MyMusicPlayer");
                    #endregion
                }
                return this.mUIBtnNextClient;
            }
        }
        #endregion
        
        #region Fields
        private WinClient mUIBtnNextClient;
        #endregion
    }
    
    [GeneratedCode("Kodowany konstruktor testu interfejsu użytkownika", "16.0.29514.35")]
    public class UISongsListList : WinList
    {
        
        public UISongsListList(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Kryteria wyszukiwania
            this.SearchProperties[WinList.PropertyNames.Name] = "MyMusicPlayer";
            this.WindowTitles.Add("MyMusicPlayer");
            #endregion
        }
        
        #region Properties
        public WinListItem UIItem2ACEOFBASEALLTHAListItem
        {
            get
            {
                if ((this.mUIItem2ACEOFBASEALLTHAListItem == null))
                {
                    this.mUIItem2ACEOFBASEALLTHAListItem = new WinListItem(this);
                    #region Kryteria wyszukiwania
                    this.mUIItem2ACEOFBASEALLTHAListItem.SearchProperties[WinListItem.PropertyNames.Name] = "2. ACE OF BASE - ALL THAT SHE WANTS.mp3";
                    this.mUIItem2ACEOFBASEALLTHAListItem.WindowTitles.Add("MyMusicPlayer");
                    #endregion
                }
                return this.mUIItem2ACEOFBASEALLTHAListItem;
            }
        }
        
        public WinListItem UIItem1AceofBaseAllForListItem
        {
            get
            {
                if ((this.mUIItem1AceofBaseAllForListItem == null))
                {
                    this.mUIItem1AceofBaseAllForListItem = new WinListItem(this);
                    #region Kryteria wyszukiwania
                    this.mUIItem1AceofBaseAllForListItem.SearchProperties[WinListItem.PropertyNames.Name] = "1. Ace of Base - All For You.mp3";
                    this.mUIItem1AceofBaseAllForListItem.WindowTitles.Add("MyMusicPlayer");
                    #endregion
                }
                return this.mUIItem1AceofBaseAllForListItem;
            }
        }
        #endregion
        
        #region Fields
        private WinListItem mUIItem2ACEOFBASEALLTHAListItem;
        
        private WinListItem mUIItem1AceofBaseAllForListItem;
        #endregion
    }
    
    [GeneratedCode("Kodowany konstruktor testu interfejsu użytkownika", "16.0.29514.35")]
    public class UIBtnPreviousWindow : WinWindow
    {
        
        public UIBtnPreviousWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Kryteria wyszukiwania
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "btnPrevious";
            this.WindowTitles.Add("MyMusicPlayer");
            #endregion
        }
        
        #region Properties
        public WinClient UIBtnPreviousClient
        {
            get
            {
                if ((this.mUIBtnPreviousClient == null))
                {
                    this.mUIBtnPreviousClient = new WinClient(this);
                    #region Kryteria wyszukiwania
                    this.mUIBtnPreviousClient.WindowTitles.Add("MyMusicPlayer");
                    #endregion
                }
                return this.mUIBtnPreviousClient;
            }
        }
        #endregion
        
        #region Fields
        private WinClient mUIBtnPreviousClient;
        #endregion
    }
}
